// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/content.proto

package content

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Content service

func NewContentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Content service

type ContentService interface {
	Query(ctx context.Context, in *ContentId, opts ...client.CallOption) (*ContentRep, error)
}

type contentService struct {
	c    client.Client
	name string
}

func NewContentService(name string, c client.Client) ContentService {
	return &contentService{
		c:    c,
		name: name,
	}
}

func (c *contentService) Query(ctx context.Context, in *ContentId, opts ...client.CallOption) (*ContentRep, error) {
	req := c.c.NewRequest(c.name, "Content.Query", in)
	out := new(ContentRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Content service

type ContentHandler interface {
	Query(context.Context, *ContentId, *ContentRep) error
}

func RegisterContentHandler(s server.Server, hdlr ContentHandler, opts ...server.HandlerOption) error {
	type content interface {
		Query(ctx context.Context, in *ContentId, out *ContentRep) error
	}
	type Content struct {
		content
	}
	h := &contentHandler{hdlr}
	return s.Handle(s.NewHandler(&Content{h}, opts...))
}

type contentHandler struct {
	ContentHandler
}

func (h *contentHandler) Query(ctx context.Context, in *ContentId, out *ContentRep) error {
	return h.ContentHandler.Query(ctx, in, out)
}
